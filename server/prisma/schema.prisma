generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  USER
  SUPERADMIN
}

enum TRANSACTION_STATUS {
  PENDING
  PROCESSING
  SHIPPED
  IN_TRANSIT
  DELIVERED
  CANCELED
  RETURNED
  REFUNDED
}

enum PAYMENT_STATUS {
  PENDING
  PAID
  CANCELED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum CART_STATUS {
  ACTIVE
  ABANDONED
  CONVERTED
}

enum CHAT_STATUS {
  OPEN
  RESOLVED
}

model User {
  id                              String        @id @default(uuid())
  googleId                        String?
  twitterId                       String?
  facebookId                      String?
  email                           String        @unique
  password                        String?
  name                            String
  avatar                          String?
  emailVerified                   Boolean       @default(false)
  emailVerificationToken          String?
  emailVerificationTokenExpiresAt DateTime?
  resetPasswordToken              String?
  resetPasswordTokenExpiresAt     DateTime?
  role                            ROLE          @default(USER)
  orders                          Order[]
  payments                        Payment[]
  addresses                       Address[]
  interactions                    Interaction[]
  reports                         Report[]
  reviews                         Review[]
  carts                           Cart[]
  cartEvents                      CartEvent[]
  chats                           Chat[]        @relation("UserChats")
  messages                        ChatMessage[]
  createdAt                       DateTime      @default(now())
  updatedAt                       DateTime      @updatedAt

  @@index([email])
}

model Product {
  id                String               @id @default(uuid())
  name              String               @unique
  description       String?
  price             Float
  discount          Float                @default(0)
  slug              String               @unique
  images            String[]
  stock             Int // Total Stock for reference
  lowStockThreshold Int                  @default(10)
  salesCount        Int                  @default(0)
  sku               String?
  isNew             Boolean              @default(false)
  isFeatured        Boolean              @default(false)
  isTrending        Boolean              @default(false)
  isBestSeller      Boolean              @default(false)
  averageRating     Float                @default(0)
  reviewCount       Int                  @default(0)
  category          Category?            @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId        String?
  orderItems        OrderItem[]
  cartItems         CartItem[]
  interactions      Interaction[]
  reviews           Review[]
  stockMovements    StockMovement[]
  Restock           Restock[]
  ProductAttribute  ProductAttribute[]
  combinations      ProductCombination[]
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt

  @@index([name, slug])
}

model ProductCombination {
  id         String             @id @default(uuid())
  productId  String
  product    Product            @relation(fields: [productId], references: [id])
  attributes ProductAttribute[]
  stock      Int
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
}

model Attribute {
  id               String              @id @default(uuid())
  name             String              @unique
  slug             String              @unique
  type             String              @default("text")
  values           AttributeValue[]
  categories       CategoryAttribute[]
  ProductAttribute ProductAttribute[]
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  RestockAttribute RestockAttribute[]

  @@index([name, slug])
}

model AttributeValue {
  id               String             @id @default(uuid())
  attributeId      String
  attribute        Attribute          @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  value            String
  slug             String             @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  ProductAttribute ProductAttribute[]
  RestockAttribute RestockAttribute[]

  @@index([attributeId, value])
}

model ProductAttribute {
  id                   String              @id @default(uuid())
  productId            String
  attributeId          String
  valueId              String?
  customValue          String?
  stock                Int                 @default(0) // Stock for this attribute value (4 for red-cotton shirt)
  product              Product             @relation(fields: [productId], references: [id])
  attribute            Attribute           @relation(fields: [attributeId], references: [id])
  value                AttributeValue?     @relation(fields: [valueId], references: [id])
  ProductCombination   ProductCombination? @relation(fields: [productCombinationId], references: [id])
  productCombinationId String?

  @@unique([productId, attributeId, valueId])
  @@index([productId])
  @@index([attributeId])
}

model CategoryAttribute {
  id          String    @id @default(uuid())
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  attributeId String
  attribute   Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  isRequired  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([categoryId, attributeId])
  @@index([categoryId, attributeId])
}

model Category {
  id                String              @id @default(uuid())
  slug              String              @unique
  name              String
  description       String?
  images            String[]
  products          Product[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  CategoryAttribute CategoryAttribute[]

  @@index([name, slug])
}

model StockMovement {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  reason    String
  userId    String?
  createdAt DateTime @default(now())
}

model Restock {
  id         String             @id @default(uuid())
  productId  String
  product    Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity   Int
  notes      String?
  userId     String?
  createdAt  DateTime           @default(now())
  attributes RestockAttribute[] // Added relation to RestockAttribute
}

model RestockAttribute {
  id          String          @id @default(uuid())
  restockId   String
  restock     Restock         @relation(fields: [restockId], references: [id], onDelete: Cascade)
  attributeId String
  attribute   Attribute       @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  valueId     String?
  value       AttributeValue? @relation(fields: [valueId], references: [id], onDelete: SetNull)
  createdAt   DateTime        @default(now())

  @@index([restockId, attributeId])
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId, userId])
}

model Order {
  id          String       @id @default(uuid())
  amount      Float
  orderDate   DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  orderItems  OrderItem[]
  payment     Payment?     @relation("OrderPayment")
  address     Address?     @relation("OrderAddress")
  shipment    Shipment?    @relation("OrderShipment")
  transaction Transaction? @relation("OrderTransaction")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId])
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId, productId])
}

model Payment {
  id        String         @id @default(uuid())
  method    String
  amount    Float
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  order     Order?         @relation("OrderPayment", fields: [orderId], references: [id], onDelete: SetNull)
  orderId   String?        @unique
  status    PAYMENT_STATUS @default(PENDING)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@index([userId, orderId])
}

model Address {
  id        String   @id @default(uuid())
  city      String
  state     String
  country   String
  zip       String
  street    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  order     Order?   @relation("OrderAddress", fields: [orderId], references: [id], onDelete: SetNull)
  orderId   String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, orderId])
}

model Shipment {
  id             String    @id @default(uuid())
  carrier        String
  trackingNumber String
  shippedDate    DateTime
  deliveryDate   DateTime?
  order          Order     @relation("OrderShipment", fields: [orderId], references: [id], onDelete: Cascade)
  orderId        String    @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([orderId])
}

model Transaction {
  id              String             @id @default(uuid())
  order           Order              @relation("OrderTransaction", fields: [orderId], references: [id], onDelete: Cascade)
  orderId         String             @unique
  status          TRANSACTION_STATUS @default(PENDING)
  transactionDate DateTime           @default(now())
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@index([orderId])
}

model Cart {
  id         String      @id @default(uuid())
  user       User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId     String?
  sessionId  String?     @unique
  cartItems  CartItem[]
  cartEvents CartEvent[]
  status     CART_STATUS @default(ACTIVE)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([userId, sessionId])
}

model CartItem {
  id        String   @id @default(uuid())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
  @@index([cartId, productId])
}

enum CART_EVENT {
  PENDING
  ADD
  CHECKOUT_STARTED
  CHECKOUT_COMPLETED
}

model CartEvent {
  id        String     @id @default(uuid())
  cartId    String
  userId    String?
  sessionId String?
  eventType CART_EVENT @default(PENDING)
  timestamp DateTime   @default(now())
  cart      Cart       @relation(fields: [cartId], references: [id], onDelete: Cascade)
  user      User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt DateTime   @default(now())
}

model Interaction {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  sessionId String?
  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  type      String
  createdAt DateTime @default(now())

  @@index([userId, sessionId, productId])
}

model Report {
  id         String   @id @default(uuid())
  type       String
  format     String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  parameters Json
  filePath   String?

  @@index([userId])
}

model Log {
  id        String   @id @default(uuid())
  level     String
  message   String
  context   Json?
  createdAt DateTime @default(now())
}

enum SECTION_TYPE {
  HERO
  PROMOTIONAL
  BENEFITS
  NEW_ARRIVALS
}

model Section {
  id             Int          @id @unique @default(autoincrement())
  type           SECTION_TYPE @default(HERO)
  title          String?
  description    String?
  images         String[]     @default([])
  icons          String?
  link           String?
  ctaText        String?
  isVisible      Boolean?     @default(false)
  primaryColor   String?
  secondaryColor String?
}

model Chat {
  id        String        @id @default(uuid())
  userId    String
  user      User          @relation("UserChats", fields: [userId], references: [id], onDelete: Cascade)
  status    CHAT_STATUS   @default(OPEN)
  messages  ChatMessage[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([userId])
}

model ChatMessage {
  id        String   @id @default(uuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  content   String?
  type      String   @default("TEXT")
  url       String?
  createdAt DateTime @default(now())

  @@index([chatId, senderId])
}
